"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    token: String
}

type Customer {
  id: ID!
  name: String!
  phone: String!
}


type Service {
    id: ID!
    name: String!
}

type Location {
    id: ID!
    name: String!
}

type Staff {
  id: ID!
  name: String!
  phone:String
}

type Booking {
  id: ID!
  location_id: Int!
  service_id: Int! 
  customer_id: Int!
  start_at: String!
  end_at:String
  status:String
  
}

type Job {
  id: ID!
  location_id: Int!
  service_id: Int! 
  customer_id: Int!
  start_at: String!
  staff_id:Int!
  charge:Float
  end_at:String
  status:String
}


extend type Query {
    services: [Service!]!  @all
    customers: [Customer!]! @guard @all
    staff: [Staff!]! @all
    jobs: [Job!]! @all

    bookings(
      start_at:String,
      end_at:String
      ):[Booking!]!
        @field(resolver: "App\\GraphQL\\Queries\\Booking@getBetween")

}
input inputJob {
   location_id: Int!,
    service_id: Int! ,
    customer_id: Int!,
    start_at: String!,
    staff_id:Int!,
    charge:Float,
    end_at:String,
    status:String
    data:String
}

type Mutation {
  createJob(input:inputJob @spread ): Job! @field(resolver: "App\\GraphQL\\Mutations\\Job@create")
  
  "Log in to a new session and get the user."
  login(email: String!, password: String!): User! @field(resolver: "App\\GraphQL\\Mutations\\Auth@login")

  "Log out from the current session, showing the user one last time."
  logout:Boolean  @guard @field(resolver: "App\\GraphQL\\Mutations\\Auth@logout")
}

 extend type Query @guard(with: "sanctum") {
  me: User @auth
}
