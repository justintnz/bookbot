"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(defaultCount: 10)
    user(id: ID @eq): User @find
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    token: String
}

type Mutation {
    login(input: LoginInput @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve"
        )
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve"
        )
    logout: LogoutResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve"
        )
    forgotPassword(
        input: ForgotPasswordInput! @spread
    ): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve"
        )
    updateForgottenPassword(
        input: NewPasswordWithCodeInput @spread
    ): ForgotPasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve"
        )
    register(input: RegisterInput @spread): RegisterResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve"
        )
    socialLogin(input: SocialLoginInput! @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve"
        )
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve"
        )
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse!
        @field(
            resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve"
        )
        @guard(with: ["api"])
}

type Customer {
    id: ID!
    name: String!
    phone: String!
}

type Service {
    id: ID!
    name: String!
    image: String
    description: String
}

type Location {
    id: ID!
    name: String!
}

type Staff {
    id: ID!
    name: String!
    phone: String
}

type Booking {
    id: ID!
    location_id: Int!
    service_id: Int!
    customer: Customer!
    start_at: String!
    end_at: String
    status: String
}

type Job {
    id: ID!
    location_id: Int!
    service_id: Int!
    customer_id: Int!
    start_at: String!
    staff_id: Int!
    charge: Float
    end_at: String
    status: String
}

input inputJob {
    location_id: Int!
    service_id: Int!
    customer_id: Int!
    start_at: String!
    staff_id: Int!
    charge: Float
    end_at: String
    status: String
    data: String
}

extend type Mutation {
    createJob(input: inputJob @spread): Job!
        @field(resolver: "App\\GraphQL\\Mutations\\Job@create")
}

extend type Query {
    me: User @auth
    services: [Service!]! @all
    customers: [Customer!]! @all
    staff: [Staff!]! @all
    jobs: [Job!]! @all

    bookings(start_at: String, end_at: String): [Booking!]!
        @field(resolver: "App\\GraphQL\\Queries\\Booking@getBetween")
}
